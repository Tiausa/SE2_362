        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 276983 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   276983:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 40%
branch  1 taken 60%
   109986:   10:    return 1;
   166997:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 71%
branch  1 taken 29%
   119055:   12:    return -1;
    47942:   13:  return 0;
   276983:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:
function initializeGame called 1486 returned 100% blocks executed 97%
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
     1486:   45:  SelectStream(1);
     1486:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
     2972:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 1%
branch  3 taken 99%
        -:   50:    {
       10:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
     1476:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    32472:   58:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   59:    {
   324720:   60:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   61:        {
   280440:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
   147600:   66:        }
    14760:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
     1476:   74:  if (numPlayers == 2)
branch  0 taken 49%
branch  1 taken 51%
        -:   75:    {
      719:   76:      state->supplyCount[curse] = 10;
      719:   77:    }
      757:   78:  else if (numPlayers == 3)
branch  0 taken 42%
branch  1 taken 58%
        -:   79:    {
      317:   80:      state->supplyCount[curse] = 20;
      317:   81:    }
        -:   82:  else
        -:   83:    {
      440:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
     1476:   88:  if (numPlayers == 2)
branch  0 taken 49%
branch  1 taken 51%
        -:   89:    {
      719:   90:      state->supplyCount[estate] = 8;
      719:   91:      state->supplyCount[duchy] = 8;
      719:   92:      state->supplyCount[province] = 8;
      719:   93:    }
        -:   94:  else
        -:   95:    {
      757:   96:      state->supplyCount[estate] = 12;
      757:   97:      state->supplyCount[duchy] = 12;
      757:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
     1476:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1476:  103:  state->supplyCount[silver] = 40;
     1476:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
    61992:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  108:    {
   487080:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  110:	{
   228780:  111:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    28920:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 96%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 96%
        -:  115:		{
     1200:  116:		  if (numPlayers == 2){ 
branch  0 taken 48%
branch  1 taken 52%
      576:  117:		    state->supplyCount[i] = 8; 
      576:  118:		  }
      624:  119:		  else{ state->supplyCount[i] = 12; }
     1200:  120:		}
        -:  121:	      else
        -:  122:		{
    13560:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
    14760:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
   214020:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
   214020:  131:	}
        -:  132:
    29520:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    11250:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26%
        -:  140:    {
     4149:  141:      state->deckCount[i] = 0;
    33192:  142:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  143:	{
    12447:  144:	  state->deck[i][j] = estate;
    12447:  145:	  state->deckCount[i]++;
    12447:  146:	}
    66384:  147:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  148:	{
    29043:  149:	  state->deck[i][j] = copper;
    29043:  150:	  state->deckCount[i]++;		
    29043:  151:	}
     4149:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    11250:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26%
        -:  156:    {
     4149:  157:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
     4149:  161:    }
        -:  162:
        -:  163:  //draw player hands
    11250:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26%
        -:  165:    {  
        -:  166:      //initialize hand size to zero
     4149:  167:      state->handCount[i] = 0;
     4149:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
     4149:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
    82656:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  178:    {
    39852:  179:      state->embargoTokens[i] = 0;
    39852:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
     1476:  183:  state->outpostPlayed = 0;
     1476:  184:  state->phase = 0;
     1476:  185:  state->numActions = 1;
     1476:  186:  state->numBuys = 1;
     1476:  187:  state->playedCardCount = 0;
     1476:  188:  state->whoseTurn = 0;
     1476:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    17712:  193:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     7380:  194:    drawCard(state->whoseTurn, state);
     7380:  195:  }
        -:  196:
     1476:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
     1476:  199:  return 0;
     1486:  200:}
        -:  201:
function shuffle called 10899 returned 100% blocks executed 100%
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
    10899:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
    10899:  210:  if (state->deckCount[player] < 1)
branch  0 taken 57%
branch  1 taken 43%
     6183:  211:    return -1;
     4716:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
   165498:  215:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6%
    78033:  216:    card = floor(Random() * state->deckCount[player]);
    78033:  217:    newDeck[newDeckPos] = state->deck[player][card];
    78033:  218:    newDeckPos++;
  3096838:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 95%
branch  1 taken 5%
  1470386:  220:      state->deck[player][i] = state->deck[player][i+1];
  1470386:  221:    }
    78033:  222:    state->deckCount[player]--;
        -:  223:  }
   165498:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94%
branch  1 taken 6%
    78033:  225:    state->deck[player][i] = newDeck[i];
    78033:  226:    state->deckCount[player]++;
    78033:  227:  }
        -:  228:
     4716:  229:  return 0;
    10899:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
    #####:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
    #####:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
        -:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 50 returned 100% blocks executed 100%
        -:  321:int supplyCount(int card, struct gameState *state) {
       50:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 250 returned 100% blocks executed 100%
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
      250:  327:  int count = 0;
        -:  328:
     1500:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  330:    {
      800:  331:      if (state->deck[player][i] == card) count++;
branch  0 taken 60%
branch  1 taken 40%
      500:  332:    }
        -:  333:
     1500:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  335:    {
      700:  336:      if (state->hand[player][i] == card) count++;
branch  0 taken 40%
branch  1 taken 60%
      500:  337:    }
        -:  338:
     1500:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  340:    {
      530:  341:      if (state->discard[player][i] == card) count++;
branch  0 taken 6%
branch  1 taken 94%
      500:  342:    }
        -:  343:
      250:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 1835 returned 100% blocks executed 100%
        -:  347:int whoseTurn(struct gameState *state) {
     1835:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:	  j++;
    #####:  408:	}
    #####:  409:    }
    #####:  410:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
    #####:  416:}
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    #####:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
    #####:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
    #####:  485:	}
    #####:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
    #####:  496:	}
    #####:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
    #####:  506:	}
    #####:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
    #####:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
    #####:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 17252 returned 100% blocks executed 100%
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
    17252:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 18%
branch  1 taken 82%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    44446:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 86%
branch  1 taken 14%
    19099:  535:      state->deck[player][i] = state->discard[player][i];
    19099:  536:      state->discard[player][i] = -1;
    19099:  537:    }
        -:  538:
     3124:  539:    state->deckCount[player] = state->discardCount[player];
     3124:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
     3124:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
     3124:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
     3124:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
     3124:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
     3124:  560:    if (deckCounter == 0)
branch  0 taken 94%
branch  1 taken 6%
     2939:  561:      return -1;
        -:  562:
      185:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      185:  564:    state->deckCount[player]--;
      185:  565:    state->handCount[player]++;//Increment hand count
      185:  566:  }
        -:  567:
        -:  568:  else{
    14128:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
    14128:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
    14128:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    14128:  577:    state->deckCount[player]--;
    14128:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
    14313:  581:  return 0;
    17252:  582:}
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
        -:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
    #####:  645:}
        -:  646:
function smithyEffect called 300 returned 100% blocks executed 100%
        -:  647:void smithyEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  648:{
        -:  649:	 //+3 Cards
        -:  650:	  int i;
     1800:  651:      for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  652:	{
      600:  653:	  drawCard(currentPlayer, state);
      600:  654:	}
        -:  655:			
        -:  656:      //discard card from hand
      300:  657:      discardCard(handPos, currentPlayer, state, 0);
      300:  658:}
function adventurerEffect called 250 returned 100% blocks executed 100%
        -:  659:void adventurerEffect(struct gameState *state)
        -:  660:{
        -:  661:	int cardDrawn;
      250:  662:	int drawnTreasure = 0;
      250:  663:	int z = 0;
        -:  664:	int tempHand[MAX_HAND];
      250:  665:	int currentPlayer = whoseTurn(state);
        -:  666:	
    18556:  667:	while(drawnTreasure < 2){
branch  0 taken 97%
branch  1 taken 3%
     9028:  668:		if (state->deckCount[currentPlayer] < 2){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 36%
branch  1 taken 64%
     3226:  669:		  shuffle(currentPlayer, state);
     3226:  670:		}
     9028:  671:		drawCard(currentPlayer, state);
     9028:  672:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    26405:  673:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 97%
branch  1 taken 3%
branch  2 taken 98%
branch  3 taken 2%
branch  4 taken 1%
branch  5 taken 99%
      500:  674:		  drawnTreasure = drawnTreasure + 1;
        -:  675:		else{
     8528:  676:		  tempHand[z]=cardDrawn;
     8528:  677:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     8528:  678:		  z++;
        -:  679:		}
        -:  680:		  }
    17556:  681:		  while(z-1>=0){
branch  0 taken 97%
branch  1 taken 3%
     8528:  682:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=tempHand[z-1]; // discard all cards in play that have been drawn
     8528:  683:		z=z-1;
        -:  684:		  }
      250:  685:}
function greatHallEffect called 100 returned 100% blocks executed 100%
        -:  686:void greatHallEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  687:{
        -:  688:      //+1 Card
      100:  689:      drawCard(currentPlayer, state);
        -:  690:			
        -:  691:      //+1 Actions
      100:  692:      state->numActions = state->numActions + 2;
        -:  693:			
        -:  694:      //discard card from hand
      100:  695:      discardCard(handPos, currentPlayer, state, 0);
      100:  696:}
        -:  697:
function remodelEffect called 0 returned 0% blocks executed 0%
        -:  698:int remodelEffect(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -:  699:{
        -:  700:	 int j; 
        -:  701:	 int i;
    #####:  702:	 j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  703:
    #####:  704:     if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  705:	{
    #####:  706:	  return -1;
        -:  707:	}
        -:  708:
    #####:  709:      gainCard(choice2, state, 0, currentPlayer);
        -:  710:
        -:  711:      //discard card from hand
    #####:  712:      discardCard(handPos, currentPlayer, state, 0);
        -:  713:
        -:  714:      //discard trashed card
    #####:  715:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  716:	{
    #####:  717:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  718:	    {
    #####:  719:	      discardCard(i, currentPlayer, state, 0);			
    #####:  720:	      break;
        -:  721:	    }
    #####:  722:	}
    #####:  723:	return 0;
    #####:  724:}
        -:  725:
function councilRoomEffect called 0 returned 0% blocks executed 0%
        -:  726:void councilRoomEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  727:{
        -:  728:	int i;
        -:  729:	  //+4 Cards
    #####:  730:     for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  drawCard(currentPlayer, state);
    #####:  733:	}
        -:  734:			
        -:  735:      //+1 Buy
    #####:  736:      state->numBuys++;
        -:  737:			
        -:  738:      //Each other player draws a card
    #####:  739:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  740:	{
    #####:  741:	  if ( i == currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  742:	    {
    #####:  743:	      drawCard(i, state);
    #####:  744:	    }
    #####:  745:	}
        -:  746:			
        -:  747:      //put played card in played card pile
    #####:  748:      discardCard(handPos, currentPlayer, state, 0);
    #####:  749:}
        -:  750:
function cardEffect called 965 returned 100% blocks executed 12%
        -:  751:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  752:{
        -:  753:  int i;
        -:  754:  int j;
        -:  755:  int k;
        -:  756:  int x;
        -:  757:  int index;
      965:  758:  int currentPlayer = whoseTurn(state);
      965:  759:  int nextPlayer = currentPlayer + 1;
        -:  760:
      965:  761:  int tributeRevealedCards[2] = {-1, -1};
        -:  762:  int temphand[MAX_HAND];// moved above the if statement
      965:  763:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  764:    nextPlayer = 0;
    #####:  765:  }
        -:  766:  
        -:  767:	
        -:  768:  //uses switch to select card and perform actions
      965:  769:  switch( card ) 
branch  0 taken 26%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 31%
branch  7 taken 0%
branch  8 taken 10%
branch  9 taken 0%
branch 10 taken 21%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 12%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
        -:  770:    {
        -:  771:    case adventurer:
      250:  772:      adventurerEffect(state);
      250:  773:      return 0;
        -:  774:			
        -:  775:    case council_room:
    #####:  776:	  councilRoomEffect(currentPlayer, state, handPos);		
    #####:  777:      return 0;
        -:  778:			
        -:  779:    case feast:
        -:  780:      //gain card with cost up to 5
        -:  781:      //Backup hand
    #####:  782:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  783:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  784:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  785:      }
        -:  786:      //Backup hand
        -:  787:
        -:  788:      //Update Coins for Buy
    #####:  789:      updateCoins(currentPlayer, state, 5);
    #####:  790:      x = 1;//Condition to loop on
    #####:  791:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  792:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  793:	  if (DEBUG)
        -:  794:	    printf("None of that card left, sorry!\n");
        -:  795:
        -:  796:	  if (DEBUG){
        -:  797:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  798:	  }
    #####:  799:	}
    #####:  800:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  801:	  printf("That card is too expensive!\n");
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  805:	  }
    #####:  806:	}
        -:  807:	else{
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  811:	  }
        -:  812:
    #####:  813:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  814:	  x = 0;//No more buying cards
        -:  815:
        -:  816:	  if (DEBUG){
        -:  817:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  818:	  }
        -:  819:
        -:  820:	}
        -:  821:      }     
        -:  822:
        -:  823:      //Reset Hand
    #####:  824:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  825:	state->hand[currentPlayer][i] = temphand[i];
    #####:  826:	temphand[i] = -1;
    #####:  827:      }
        -:  828:      //Reset Hand
        -:  829:      			
    #####:  830:      return 0;
        -:  831:			
        -:  832:    case gardens:
    #####:  833:      return -1;
        -:  834:			
        -:  835:    case mine:
    #####:  836:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  837:
    #####:  838:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:		
    #####:  843:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 2, currentPlayer);
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
    #####:  864:	      break;
        -:  865:	    }
    #####:  866:	}			
    #####:  867:      return 0;
        -:  868:			
        -:  869:    case remodel:		
    #####:  870:      return remodelEffect(currentPlayer, state, handPos, choice1, choice2);
        -:  871:		
        -:  872:    case smithy:
        -:  873:		//execute smithy effect
      300:  874:		smithyEffect(currentPlayer, state, handPos);
      300:  875:		return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
    #####:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  903:		isGameOver(state);
    #####:  904:	      }
    #####:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
    #####:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
    #####:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  920:	    isGameOver(state);
    #####:  921:	  }
    #####:  922:	}
        -:  923:      }      
    #####:  924:      return 0;
        -:  925:		
        -:  926:    case great_hall:
      100:  927:	  greatHallEffect(currentPlayer, state, handPos);	
      100:  928:      return 0;
        -:  929:		
        -:  930:    case minion:
        -:  931:      //+1 action
    #####:  932:      state->numActions++;
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
        -:  936:			
    #####:  937:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  state->coins = state->coins + 2;
    #####:  940:	}
        -:  941:			
    #####:  942:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  943:	{
        -:  944:	  //discard hand
    #####:  945:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  946:	    {
    #####:  947:	      discardCard(handPos, currentPlayer, state, 0);
        -:  948:	    }
        -:  949:				
        -:  950:	  //draw 4
    #####:  951:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  952:	    {
    #####:  953:	      drawCard(currentPlayer, state);
    #####:  954:	    }
        -:  955:				
        -:  956:	  //other players discard hand and redraw if hand size > 4
    #####:  957:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  958:	    {
    #####:  959:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  960:		{
    #####:  961:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  962:		    {
        -:  963:		      //discard hand
    #####:  964:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  965:			{
    #####:  966:			  discardCard(handPos, i, state, 0);
        -:  967:			}
        -:  968:							
        -:  969:		      //draw 4
    #####:  970:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  971:			{
    #####:  972:			  drawCard(i, state);
    #####:  973:			}
    #####:  974:		    }
    #####:  975:		}
    #####:  976:	    }
        -:  977:				
    #####:  978:	}
    #####:  979:      return 0;
        -:  980:		
        -:  981:    case steward:
      200:  982:      if (choice1 == 1)
branch  0 taken 36%
branch  1 taken 64%
        -:  983:	{
        -:  984:	  //+2 cards
       72:  985:	  drawCard(currentPlayer, state);
       72:  986:	  drawCard(currentPlayer, state);
       72:  987:	}
      128:  988:      else if (choice1 == 2)
branch  0 taken 54%
branch  1 taken 46%
        -:  989:	{
        -:  990:	  //+2 coins
       69:  991:	  state->coins = state->coins + 2;
       69:  992:	}
        -:  993:      else
        -:  994:	{
        -:  995:	  //trash 2 cards in hand
       59:  996:	  discardCard(choice2, currentPlayer, state, 1);
       59:  997:	  discardCard(choice3, currentPlayer, state, 1);
        -:  998:	}
        -:  999:			
        -: 1000:      //discard card from hand
      200: 1001:      discardCard(handPos, currentPlayer, state, 0);
      200: 1002:      return 0;
        -: 1003:		
        -: 1004:    case tribute:
    #####: 1005:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1006:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1007:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1008:	  state->deckCount[nextPlayer]--;
    #####: 1009:	}
    #####: 1010:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1011:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1012:	  state->discardCount[nextPlayer]--;
    #####: 1013:	}
        -: 1014:	else{
        -: 1015:	  //No Card to Reveal
        -: 1016:	  if (DEBUG){
        -: 1017:	    printf("No cards to reveal\n");
        -: 1018:	  }
        -: 1019:	}
    #####: 1020:      }
        -: 1021:	    
        -: 1022:      else{
    #####: 1023:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1024:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1025:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1026:	    state->deckCount[nextPlayer]++;
    #####: 1027:	    state->discard[nextPlayer][i] = -1;
    #####: 1028:	    state->discardCount[nextPlayer]--;
    #####: 1029:	  }
        -: 1030:			    
    #####: 1031:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1032:	} 
    #####: 1033:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
    #####: 1036:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
        -: 1039:      }    
        -: 1040:		       
    #####: 1041:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1042:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1043:	state->playedCardCount++;
    #####: 1044:	tributeRevealedCards[1] = -1;
    #####: 1045:      }
        -: 1046:
    #####: 1047:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1048:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1049:	  state->coins += 2;
    #####: 1050:	}
        -: 1051:		    
    #####: 1052:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1053:	  drawCard(currentPlayer, state);
    #####: 1054:	  drawCard(currentPlayer, state);
    #####: 1055:	}
        -: 1056:	else{//Action Card
    #####: 1057:	  state->numActions = state->numActions + 2;
        -: 1058:	}
    #####: 1059:      }
        -: 1060:	    
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case ambassador:
    #####: 1064:      j = 0;		//used to check if player has enough cards to discard
        -: 1065:
    #####: 1066:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1067:	{
    #####: 1068:	  return -1;				
        -: 1069:	}
        -: 1070:
    #####: 1071:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  return -1;
        -: 1074:	}
        -: 1075:
    #####: 1076:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
    #####: 1078:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1079:	    {
    #####: 1080:	      j++;
    #####: 1081:	    }
    #####: 1082:	}
    #####: 1083:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  return -1;				
        -: 1086:	}
        -: 1087:
        -: 1088:      if (DEBUG) 
        -: 1089:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1090:
        -: 1091:      //increase supply count for choosen card by amount being discarded
    #####: 1092:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1093:			
        -: 1094:      //each other player gains a copy of revealed card
    #####: 1095:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1098:	    {
    #####: 1099:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1100:	    }
    #####: 1101:	}
        -: 1102:
        -: 1103:      //discard played card from hand
    #####: 1104:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1105:
        -: 1106:      //trash copies of cards returned to supply
    #####: 1107:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	    {
    #####: 1111:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1112:		{
    #####: 1113:		  discardCard(i, currentPlayer, state, 1);
    #####: 1114:		  break;
        -: 1115:		}
    #####: 1116:	    }
    #####: 1117:	}			
        -: 1118:
    #####: 1119:      return 0;
        -: 1120:		
        -: 1121:    case cutpurse:
        -: 1122:
      115: 1123:      updateCoins(currentPlayer, state, 2);
     1150: 1124:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1125:	{
      460: 1126:	  if (i != currentPlayer)
branch  0 taken 75%
branch  1 taken 25%
        -: 1127:	    {
     1920: 1128:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 89%
branch  1 taken 11%
        -: 1129:		{
      855: 1130:		  if (state->hand[i][j] == copper)
branch  0 taken 28%
branch  1 taken 72%
        -: 1131:		    {
      240: 1132:		      discardCard(j, i, state, 0);
      240: 1133:		      break;
        -: 1134:		    }
      615: 1135:		  if (j == state->handCount[i])
branch  0 taken 0%
branch  1 taken 100%
        -: 1136:		    {
    #####: 1137:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1138:			{
        -: 1139:			  if (DEBUG)
        -: 1140:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1141:			}	
    #####: 1142:		      break;
        -: 1143:		    }		
      615: 1144:		}
        -: 1145:					
      345: 1146:	    }
        -: 1147:				
      460: 1148:	}				
        -: 1149:
        -: 1150:      //discard played card from hand
      115: 1151:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1152:
      115: 1153:      return 0;
        -: 1154:
        -: 1155:		
        -: 1156:    case embargo: 
        -: 1157:      //+2 Coins
    #####: 1158:      state->coins = state->coins + 2;
        -: 1159:			
        -: 1160:      //see if selected pile is in play
    #####: 1161:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  return -1;
        -: 1164:	}
        -: 1165:			
        -: 1166:      //add embargo token to selected supply pile
    #####: 1167:      state->embargoTokens[choice1]++;
        -: 1168:			
        -: 1169:      //trash card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case outpost:
        -: 1174:      //set outpost flag
    #####: 1175:      state->outpostPlayed++;
        -: 1176:			
        -: 1177:      //discard card
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1179:      return 0;
        -: 1180:		
        -: 1181:    case salvager:
        -: 1182:      //+1 buy
    #####: 1183:      state->numBuys++;
        -: 1184:			
    #####: 1185:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1186:	{
        -: 1187:	  //gain coins equal to trashed card
    #####: 1188:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1189:	  //trash card
    #####: 1190:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1191:	}
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case sea_hag:
    #####: 1198:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1199:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1200:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1201:	  state->discardCount[i]++;
    #####: 1202:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1203:	}
    #####: 1204:      }
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case treasure_map:
        -: 1208:      //search hand for another treasure_map
    #####: 1209:      index = -1;
    #####: 1210:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1211:	{
    #####: 1212:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1213:	    {
    #####: 1214:	      index = i;
    #####: 1215:	      break;
        -: 1216:	    }
    #####: 1217:	}
    #####: 1218:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1219:	{
        -: 1220:	  //trash both treasure cards
    #####: 1221:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1222:	  discardCard(index, currentPlayer, state, 1);
        -: 1223:
        -: 1224:	  //gain 4 Gold cards
    #####: 1225:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1228:	    }
        -: 1229:				
        -: 1230:	  //return success
    #####: 1231:	  return 1;
        -: 1232:	}
        -: 1233:			
        -: 1234:      //no second treasure_map found in hand
    #####: 1235:      return -1;
        -: 1236:    }
        -: 1237:	
    #####: 1238:  return -1;
      965: 1239:}
        -: 1240:
function discardCard called 1208 returned 100% blocks executed 100%
        -: 1241:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1242:{
        -: 1243:	
        -: 1244:  //if card is not trashed, added to Played pile 
     1208: 1245:  if (trashFlag < 1)
branch  0 taken 83%
branch  1 taken 17%
        -: 1246:    {
        -: 1247:      //add card to played pile
     1000: 1248:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1000: 1249:      state->playedCardCount++;
     1000: 1250:    }
        -: 1251:	
        -: 1252:  //set played card to -1
     1208: 1253:  state->hand[currentPlayer][handPos] = -1;
        -: 1254:	
        -: 1255:  //remove card from player's hand
     1208: 1256:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 7%
branch  1 taken 93%
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
       90: 1259:      state->handCount[currentPlayer]--;
       90: 1260:    }
     1118: 1261:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 2%
branch  1 taken 98%
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
       27: 1264:      state->handCount[currentPlayer]--;
       27: 1265:    }
        -: 1266:  else 	
        -: 1267:    {
        -: 1268:      //replace discarded card with last card in hand
     1091: 1269:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1270:      //set last card to -1
     1091: 1271:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1272:      //reduce number of cards in hand
     1091: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:	
     1208: 1276:  return 0;
        -: 1277:}
        -: 1278:
function gainCard called 50 returned 100% blocks executed 81%
        -: 1279:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1280:{
        -: 1281:  //Note: supplyPos is enum of choosen card
        -: 1282:	
        -: 1283:  //check if supply pile is empty (0) or card is not used in game (-1)
       50: 1284:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1285:    {
    #####: 1286:      return -1;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //added card for [whoseTurn] current player:
        -: 1290:  // toFlag = 0 : add to discard
        -: 1291:  // toFlag = 1 : add to deck
        -: 1292:  // toFlag = 2 : add to hand
        -: 1293:
       50: 1294:  if (toFlag == 1)
branch  0 taken 70%
branch  1 taken 30%
        -: 1295:    {
       35: 1296:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       35: 1297:      state->deckCount[player]++;
       35: 1298:    }
       15: 1299:  else if (toFlag == 2)
branch  0 taken 100%
branch  1 taken 0%
        -: 1300:    {
       15: 1301:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       15: 1302:      state->handCount[player]++;
       15: 1303:    }
        -: 1304:  else
        -: 1305:    {
    #####: 1306:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1307:      state->discardCount[player]++;
        -: 1308:    }
        -: 1309:	
        -: 1310:  //decrease number in supply pile
       50: 1311:  state->supplyCount[supplyPos]--;
        -: 1312:	 
       50: 1313:  return 0;
       50: 1314:}
        -: 1315:
function updateCoins called 2251 returned 100% blocks executed 100%
        -: 1316:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1317:{
        -: 1318:  int i;
        -: 1319:	
        -: 1320:  //reset coin count
     2251: 1321:  state->coins = 0;
        -: 1322:
        -: 1323:  //add coins for each Treasure card in player's hand
    24372: 1324:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18%
        -: 1325:    {
     9935: 1326:      if (state->hand[player][i] == copper)
branch  0 taken 67%
branch  1 taken 33%
        -: 1327:	{
     6639: 1328:	  state->coins += 1;
     6639: 1329:	}
     3296: 1330:      else if (state->hand[player][i] == silver)
branch  0 taken 32%
branch  1 taken 68%
        -: 1331:	{
     1060: 1332:	  state->coins += 2;
     1060: 1333:	}
     2236: 1334:      else if (state->hand[player][i] == gold)
branch  0 taken 31%
branch  1 taken 69%
        -: 1335:	{
      685: 1336:	  state->coins += 3;
      685: 1337:	}	
     9935: 1338:    }	
        -: 1339:
        -: 1340:  //add bonus
     2251: 1341:  state->coins += bonus;
        -: 1342:
     2251: 1343:  return 0;
        -: 1344:}
        -: 1345:
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
